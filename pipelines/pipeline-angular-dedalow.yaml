---
# The getting-started Pipeline will run through several tasks:
# - source is pulled from git
# - source is built into an image by img
# - image output is pushed to ECR
# - cloudevent emitted
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-with-dedalowangular
  namespace: tekton-pipelines
spec:
  params:
  - name: repoName
    type: string
    description: Name of the repo
    default: ""
  - name: imageTag
    type: string
    description: Name of the repo
    default: ""
  - name: repo-url
    type: string
    description: The git repo URL to clone from.  
  - name: IMAGE
    type: string
  - name: project-type
    type: string
    description: Triggers the compile task.
  - name: pipeline-run-name
    type: string
    description: Generated name by the pipeline run.
  - name: pipeline-name
    type: string
    description: Name of the pipeline.
  workspaces:
  - name: pipeline-data-pvc
    description: | 
      This workspace contains the cloned repo files, so they can be read by the
      next task.
  - name: git-basic-auth-secret
    description: Secret that contains thegit credentials  
  - name: my-secret-para-docker
    description: Secret that contains the sonarqube credentials
  - name: maven-settings
    description: required but not needed   
  tasks:
  - name: fetch-source
    taskRef:
      name: git-clone-original
    retries: 1 
    workspaces:
    - name: output
      workspace: pipeline-data-pvc
    - name: basic-auth
      workspace: git-basic-auth-secret
    params:
    - name: url
      value: $(params.repo-url)
  - name: save-state
    runAfter: ["fetch-source"]
    retries: 1
    taskRef:
      name: save-state-task-dapr
    workspaces:
    - name: source
      workspace: pipeline-data-pvc
    params:
    - name: STATE_KEY
      value: $(params.repoName)|$(params.pipeline-name)|$(params.pipeline-run-name)|fetch-source
    - name: PIPELINE_NAME
      value: $(params.pipeline-name)
    - name: EXECUTION_NAME
      value: $(params.pipeline-run-name)
    - name: STEP_NAME
      value: "fetch-source"
  - name: build-push
    runAfter: ["save-state"]
    retries: 1
    taskRef:
      name: kaniko
    workspaces:
    - name: source
      workspace: pipeline-data-pvc
    - name: dockerconfig
      workspace: my-secret-para-docker
    params:
    - name: IMAGE
      value: "$(params.IMAGE):$(tasks.fetch-source.results.commit)"
    - name: BUILDER_IMAGE
      value: "gcr.io/kaniko-project/executor:v1.6.0-debug"
  # - name: update-version
  #   params:
  #   - name: repoName
  #     value: $(params.repoName)
  #   - name: imageTag
  #     value: $(tasks.fetch-source.results.commit)
  #   runAfter: ["build-push"]
  #   retries: 10
  #   taskRef:
  #    kind: Task
  #    name: update-version
  finally:
    - name: check-fetch-source-failed
      taskRef:
        name: check-state-task-dapr
      workspaces:
        - name: source
          workspace: pipeline-data-pvc
      params:
        - name: fetch-source
          value: "$(tasks.fetch-source.status)"
        - name: STATE_KEY
          value: $(params.repoName)|$(params.pipeline-name)|$(params.pipeline-run-name)|fetch-source
      when:
        - input: "$(tasks.fetch-source.status)"
          operator: in
          values: ["Failed"]
    - name: check-build-push-failed
      taskRef:
        name: check-state-task-dapr
      workspaces:
        - name: source
          workspace: pipeline-data-pvc
      params:
        - name: build-push
          value: "$(tasks.build-push.status)"
        - name: STATE_KEY
          value: $(params.repoName)|$(params.pipeline-name)|$(params.pipeline-run-name)|build-push
      when:
        - input: "$(tasks.build-push.status)"
          operator: in
          values: ["Failed"]
    # - name: check-update-version-failed
    #   taskRef:
    #     name: check-state-failed-dapr
    #   workspaces:
    #     - name: source
    #       workspace: pipeline-data-pvc
    #   params:
    #     - name: update-version
    #       value: "$(tasks.update-version.status)"
    #     - name: STATE_KEY
    #       value: $(params.repoName)|$(params.pipeline-name)|$(params.pipeline-run-name)|update-version
    #   when:
    #     - input: "$(tasks.update-version.status)"
    #       operator: in
    #       values: ["failed"]
---
